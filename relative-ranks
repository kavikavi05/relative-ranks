/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

void swap(char *c, int size){
    for(int i = 0, j = size - 1; i < j; i++, j--){
        char tmp = c[i];
        c[i] = c[j];
        c[j] = tmp;
    }
}

void intToStr(int n, char *c){
    int i;
    for(i = 0; n; n /= 10, i++)
        c[i] = n % 10 + '0';
    c[i] = '\0';
    swap(c, i);
}

char** findRelativeRanks(int* score, int scoreSize, int* returnSize) {
    int n = 1000001, store[n];

    for(int i = 0; i < 1000001; i++)
        store[i] = -1;

    char **ret = (char**)calloc(scoreSize, sizeof(char*));

    for(int i = 0; i < scoreSize; i++){
        ret[i] = (char*)calloc(20 , sizeof(char));
        store[score[i]] = i;
    }

    for(int i = 1000000, count = 0; i >= 0 && count < scoreSize; i--)
        if(store[i] >= 0){
            if(count + 1 == 1)
                strcpy (ret[store[i]], "Gold Medal");
            else if(count + 1 == 2)
                strcpy(ret[store[i]], "Silver Medal");
            else if(count + 1 == 3)
                strcpy(ret[store[i]], "Bronze Medal");
            else{
                char tmp[20] = {};
                intToStr(count + 1, tmp);
                strcpy(ret[store[i]], tmp);
            }
            count++;
        }
    *returnSize = scoreSize;
    return ret;
}
